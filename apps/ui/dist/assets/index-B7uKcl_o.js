const a={waiting:new Map,schedule:new Map,imports:new Map};function I(e="id"){return`${e}_${Math.random().toString(36).slice(2,10)}`}const L={importExcel(e,t){const n=I("imp");let r=0,o=0;const d=0,u=[],i=new Set;for(const c of t){if(!c.patientName||!c.mrn){o++;continue}const s=`${c.patientName}|${c.mrn}`;if(i.has(s)){o++;continue}i.add(s);const g=I("w"),A={id:g,patientName:c.patientName,mrn:c.mrn,caseTypeId:c.caseTypeName??"case:unknown",procedure:c.procedure??"",estDurationMin:c.estDurationMin??0,surgeonId:c.surgeonId,createdAt:new Date().toISOString()};a.waiting.set(g,A),r++}const m={id:n,fileName:e,importedAt:new Date().toISOString(),countsCreated:r,countsUpdated:d,countsSkipped:o,errors:u};return a.imports.set(n,m),m}};function M(e,t){return L.importExcel(e,t)}function y(e){return e?`••••${e.slice(-4)}`:""}const T={list(e){let t=Array.from(a.waiting.values());return e!=null&&e.caseTypeId&&(t=t.filter(n=>n.caseTypeId===e.caseTypeId)),e!=null&&e.surgeonId&&(t=t.filter(n=>n.surgeonId===e.surgeonId)),e!=null&&e.search&&(t=t.filter(n=>(n.patientName+" "+n.procedure).toLowerCase().includes(e.search.toLowerCase()))),t.map(n=>({...n,maskedMrn:y(n.mrn)}))},softRemove(e){return a.waiting.has(e)?(a.waiting.delete(e),!0):!1},update(e,t){const n=a.waiting.get(e);if(!n)return null;const r={...n,...t};return a.waiting.set(e,r),{...r,maskedMrn:y(r.mrn)}}},O=T.list,D=T.softRemove,R=T.update;function b(e,t,n,r){return!(t<=n||r<=e)}const p={list(e){const t=Array.from(a.schedule.values());return e!=null&&e.date?t.filter(n=>n.date===e.date):t},create(e){const t=new Date().toISOString().slice(0,10);if(e.date<=t)throw new Error("Scheduled date must be in the future");const n=Array.from(a.schedule.values()),r=n.filter(s=>s.waitingListItemId===e.waitingListItemId),o=r.find(s=>s.status!=="cancelled"),d=r.filter(s=>s.id!==(o==null?void 0:o.id)),u=n.filter(s=>s.date===e.date&&(!o||s.id!==o.id));for(const s of u){if(s.roomId===e.roomId&&b(s.startTime,s.endTime,e.startTime,e.endTime))throw new Error("Room unavailable");if(s.surgeonId===e.surgeonId&&b(s.startTime,s.endTime,e.startTime,e.endTime))throw new Error("Surgeon unavailable")}const i=new Date().toISOString();if(o){for(const g of d)a.schedule.delete(g.id);const s={...o,roomId:e.roomId,surgeonId:e.surgeonId,date:e.date,startTime:e.startTime,endTime:e.endTime,notes:e.notes??o.notes,status:"scheduled",updatedAt:i,version:o.version+1};return a.schedule.set(o.id,s),s}for(const s of d)a.schedule.delete(s.id);const m=I("sch"),c={id:m,waitingListItemId:e.waitingListItemId,roomId:e.roomId,surgeonId:e.surgeonId,date:e.date,startTime:e.startTime,endTime:e.endTime,status:"scheduled",notes:e.notes,updatedAt:i,version:1};return a.schedule.set(m,c),c},update(e,t){const n=a.schedule.get(e);if(!n)throw new Error("Not found");if(t.version!==n.version)throw new Error("Version conflict");const r={...n,...t,version:n.version+1,updatedAt:new Date().toISOString()};return a.schedule.set(e,r),r},cancel(e){const t=a.schedule.get(e);t&&(t.status="cancelled",t.updatedAt=new Date().toISOString(),t.version+=1,a.schedule.set(e,t))}},B=p.create,S=p.update,C=p.cancel,k=p.list,q={week(e){return Array.from(a.waiting.values()).map(t=>({name:t.patientName,maskedMrn:y(t.mrn),caseTypeId:t.caseTypeId,procedure:t.procedure}))}},P=q.week,$={default:{name:"default",palette:{background:"#0f111a",surface:"#161821",text:"#e6e6e6",mutedText:"#a0a3ad",accent:"#7aa2f7",success:"#9ece6a",warning:"#e0af68",danger:"#f7768e",focusOutline:"#c0caf5"},typography:{baseFontSizePx:14,lineHeight:1.5,scaleRatio:1.2}},"high-contrast":{name:"high-contrast",palette:{background:"#000000",surface:"#0a0a0a",text:"#ffffff",mutedText:"#e0e0e0",accent:"#00baff",success:"#37ff8b",warning:"#ffd166",danger:"#ff4d6d",focusOutline:"#ffffff"},typography:{baseFontSizePx:16,lineHeight:1.6,scaleRatio:1.2}}};function F(e){return $[e]}function G(e){const t=F(e).palette;return[{key:"case-elective",label:"Elective",color:t.accent},{key:"case-urgent",label:"Urgent",color:t.warning},{key:"case-emergency",label:"Emergency",color:t.danger},{key:"case-success",label:"Completed",color:t.success}]}function v(e,t){const n=e.split("/").filter(Boolean),r=t.split("/").filter(Boolean);if(n.length!==r.length)return{ok:!1,params:{}};const o={};for(let d=0;d<n.length;d++){const u=n[d],i=r[d];if(u.startsWith(":"))o[u.slice(1)]=decodeURIComponent(i);else if(u!==i)return{ok:!1,params:{}}}return{ok:!0,params:o}}function l(e,t={}){return{status:200,body:e,headers:t}}function E(e){return{status:201,body:e}}function N(){return{status:204}}function f(e){return{status:400,body:{error:e}}}function h(e="Not Found"){return{status:404,body:{error:e}}}function x(e){return{status:409,body:{error:e}}}function w(e){return{status:500,body:{error:e}}}const H=[{method:"POST",pattern:"/imports/excel",handler:e=>{const t=e.body;if(!t||!t.fileName||!Array.isArray(t.rows))return f("fileName and rows are required");const n=M(t.fileName,t.rows);return E(n)}},{method:"GET",pattern:"/backlog",handler:e=>{const{caseTypeId:t,surgeonId:n,search:r}=e.query||{},o=O({caseTypeId:t,surgeonId:n,search:r});return l(o)}},{method:"DELETE",pattern:"/backlog/:id",handler:(e,t)=>D(t.id)?N():h("Backlog item not found")},{method:"PATCH",pattern:"/backlog/:id",handler:(e,t)=>{const n=t.id,r=e.body;if(!r||Object.keys(r).length===0)return f("No fields to update");const o=R(n,r);return o?l(o):h("Backlog item not found")}},{method:"GET",pattern:"/schedule",handler:e=>{const{date:t}=e.query||{},n=k(t?{date:t}:void 0);return l(n)}},{method:"POST",pattern:"/schedule",handler:e=>{const t=e.body;if(!t||!t.waitingListItemId||!t.roomId||!t.surgeonId||!t.date||!t.startTime||!t.endTime)return f("Missing required schedule fields");try{const n=B({waitingListItemId:t.waitingListItemId,roomId:t.roomId,surgeonId:t.surgeonId,date:t.date,startTime:t.startTime,endTime:t.endTime,notes:t.notes});return E(n)}catch(n){const r=(n==null?void 0:n.message)||"Error creating schedule";return r.includes("future")||r.includes("past")?f(r):r.includes("unavailable")?x(r):w(r)}}},{method:"PATCH",pattern:"/schedule/:id",handler:(e,t)=>{const n=t.id,r=e.body;if(!r)return f("Missing body");try{if(typeof r.version=="number"){const i=S(n,r);return l(i)}const o=k().find(i=>i.id===n);if(!o)return h("Not found");const d={version:o.version};r.startTime!==void 0&&(d.startTime=r.startTime),r.endTime!==void 0&&(d.endTime=r.endTime),r.status!==void 0&&(d.status=r.status),r.notes!==void 0&&(d.notes=r.notes);const u=S(n,d);return l(u)}catch(o){const d=(o==null?void 0:o.message)||"Error updating schedule";return d.includes("Not found")?h(d):d.includes("Version conflict")?x(d):w(d)}}},{method:"DELETE",pattern:"/schedule/:id",handler:(e,t)=>(C(t.id),N())},{method:"GET",pattern:"/exports/schedule",handler:e=>{const{date:t=new Date().toISOString().slice(0,10)}=e.query||{},n=P(t);return l(n)}},{method:"GET",pattern:"/legend",handler:e=>{var r;const t=((r=e.query)==null?void 0:r.theme)||"default",n=G(t);return l(n)}}];async function U(e){const t=H.find(r=>r.method===e.method&&v(r.pattern,e.path).ok);if(!t)return{status:404,body:{error:"Route not found"}};const{params:n}=v(t.pattern,e.path);try{return await t.handler(e,n)}catch(r){return w((r==null?void 0:r.message)||"Unknown error")}}export{U as handleRequest};
